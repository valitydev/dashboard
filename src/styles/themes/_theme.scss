@use 'sass:map';
@use '@angular/material' as mat;
@use '@vality/ng-core' as v;

@import '../utils/map-get-strict';

@import '../dsh/theme';
@import '../mat/theme';
@import '../dsh/typography';
@import '../utils/mat-component-variants';

@mixin theme($_palettes, $config, $background, $foreground) {
    $basic-theme: v.create-light-theme(
        map-merge(
            $config,
            (
                typography: dsh-typography-config(),
            )
        )
    );

    $background: map-merge(
        map-merge(map-get($basic-theme, background), $background),
        (
            // --- Custom ---
            hover: map-get-strict($background, hover),
            selected-button: map-get-strict($background, selected-button)
        )
    );

    $foreground: map-merge(
        map-merge(map-get($basic-theme, foreground), $foreground),
        (
            // --- Custom ---
            contrast-text: map-get-strict($foreground, contrast-text),
            light-text: map-get-strict($foreground, light-text),
            border: map-get-strict($foreground, border)
        )
    );

    $theme: map-merge(
        $basic-theme,
        (
            foreground: $foreground,
            background: $background,
            // --- Custom ---
            // Theme name (for CSS class name)
            name: map-get-strict($config, name),
            // If you need other colors, then replace with a palette
            success-base: map-get-strict($config, success-base),
            pending-base: map-get-strict($config, pending-base),
            warn-base: map-get-strict($config, warn-base),
        )
    );
    $typography: map-get($theme, typography);

    body.#{map-get($theme, name)} {
        @include v.select-theme($theme);
        @include v.typography-hierarchy($theme);

        @include dsh-typography($typography);

        @include dsh-theme($theme);

        // Material 3 theme
        $_rest: (
            secondary: map.get($_palettes, secondary),
            neutral: map.get($_palettes, neutral),
            neutral-variant: map.get($_palettes, neutral-variant),
            error: map.get($_palettes, error),
        );
        $_primary: map.merge(map.get($_palettes, primary), $_rest);
        $_tertiary: map.merge(map.get($_palettes, tertiary), $_rest);

        $light-theme: mat.define-theme(
            (
                color: (
                    theme-type: light,
                    primary: $_primary,
                    tertiary: $_tertiary,
                ),
            )
        );

        @include mat.all-component-themes($light-theme);
        @include mat.typography-hierarchy($light-theme);
        @include mat-component-variants($light-theme);

        // Overrides
        @include mat-override-theme($light-theme);
    }
}
